name: Build and Release (Windows)

on:
  push:
    tags:
      - 'v*'

permissions:
  contents: write
  packages: write

jobs:
  build:
    name: Build on Windows and create Release
    runs-on: windows-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Python 3.12
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'

      - name: Create virtualenv
        shell: pwsh
        run: python -m venv .venv

      - name: Install dependencies
        shell: pwsh
        run: .\.venv\Scripts\python -m pip install --upgrade pip; .\.venv\Scripts\python -m pip install -r requirements.txt

      - name: Build executable and prepare installer
        shell: pwsh
        env:
          CREATE_INSTALLER: '1'
          INCLUDE_DB: '1'
        run: |
          # Deriva versão da tag e propaga para o build
          $version = "${{ github.ref_name }}"
          if (-not $version) { $version = "1.0.0" }
          # Remove prefixo 'v' (ex.: v1.6.0 -> 1.6.0)
          $version = $version -replace '^v',''
          $env:APP_VERSION = $version
          echo "APP_VERSION=$version" | Out-File -FilePath $env:GITHUB_ENV -Append

          # Instala Inno Setup (para compilar o instalador)
          choco install innosetup --no-progress -y

          # Detecta ISCC.exe em caminhos comuns
          $isccCandidates = @(
            'C:\Program Files (x86)\Inno Setup 6\ISCC.exe',
            'C:\Program Files\Inno Setup 6\ISCC.exe'
          )
          $iscc = $null
          foreach ($c in $isccCandidates) { if (Test-Path $c) { $iscc = $c; break } }
          if ($iscc) {
            $env:INNO_COMPILER = $iscc
            echo "INNO_COMPILER=$iscc" | Out-File -FilePath $env:GITHUB_ENV -Append
          } else {
            Write-Warning 'ISCC.exe não encontrado após instalação do Inno Setup.'
          }

          # Executa o build (PyInstaller + staging + opcional Inno)
          .\.venv\Scripts\Activate.ps1
          ./build.bat

      - name: Upload exe as workflow artifact
        uses: actions/upload-artifact@v4
        with:
          name: CatalogoDePecas-exe
          path: dist\CatalogoDePecas.exe

      - name: Upload installer as workflow artifact
        if: success()
        uses: actions/upload-artifact@v4
        with:
          name: CatalogoDePecas-installer
          path: Output\instalador_*.exe

      - name: Create GitHub Release and upload assets
        shell: pwsh
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          $TagName = "${{ github.ref_name }}"
          $ReleaseName = $TagName
          $Body = "Automated release generated by GitHub Actions."
          $AssetPath = 'dist\CatalogoDePecas.exe'
          $InstallerPath = (Get-ChildItem -Path 'Output' -Filter 'instalador_*.exe' -ErrorAction SilentlyContinue | Select-Object -First 1).FullName
          $Repo = "ricardofebronio19/CATALOGOGERAL"

          if (-not $env:GITHUB_TOKEN) { Write-Error 'GITHUB_TOKEN is not set'; exit 1 }
          if (-not (Test-Path $AssetPath)) { Write-Error "Asset not found: $AssetPath"; exit 1 }

          $headers = @{ Authorization = "token $($env:GITHUB_TOKEN)"; "User-Agent" = "catalogo-build-script"; Accept = 'application/vnd.github+json' }

          Write-Host "Creating release $TagName in $Repo"
          $createUrl = "https://api.github.com/repos/$Repo/releases"
          $bodyObj = @{ tag_name = $TagName; name = $ReleaseName; body = $Body; draft = $false; prerelease = $false } | ConvertTo-Json
          $response = Invoke-RestMethod -Uri $createUrl -Method Post -Headers $headers -Body $bodyObj -ContentType 'application/json'
          if (-not $response) { Write-Error 'Failed to create release'; exit 1 }

          $assetPaths = @($AssetPath)
          if ($InstallerPath) { $assetPaths += $InstallerPath }

          $uploadUrl = $response.upload_url
          if ([string]::IsNullOrEmpty($uploadUrl)) {
            Write-Host 'upload_url not present in response, constructing from release id'
            $uploadUrl = "https://uploads.github.com/repos/$Repo/releases/$($response.id)/assets"
          } else {
            $uploadUrl = $uploadUrl -replace '\\{\\?name,label\\}', ''
          }

          foreach ($p in $assetPaths) {
            $assetName = Split-Path $p -Leaf
            $uploadUri = "$($uploadUrl)?name=$assetName"
            Write-Host "Uploading asset $assetName to $uploadUri"
            Invoke-RestMethod -Uri $uploadUri -Method Post -Headers $headers -InFile $p -ContentType 'application/octet-stream'
          }
          Write-Host "Release and assets uploaded successfully. URL: $($response.html_url)"
