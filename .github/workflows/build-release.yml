name: Build and Release (Windows)

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch: {}

# Permissões necessárias para que o GITHUB_TOKEN possa criar releases e fazer upload de assets.
# Sem 'contents: write' a action de criação de release pode falhar com
# "Resource not accessible by integration" em algumas configurações do repositório/organização.
permissions:
  contents: write
  packages: write

jobs:
  build:
    name: Build on Windows and create Release
    runs-on: windows-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Python 3.12
        uses: actions/setup-python@v4
        with:
          python-version: '3.12'

      - name: Create virtualenv
        run: python -m venv .venv

      - name: Install dependencies
        run: .\.venv\Scripts\python -m pip install --upgrade pip && .\.venv\Scripts\python -m pip install -r requirements.txt

      - name: Run build.bat (PyInstaller)
        shell: cmd
        run: .\build.bat

      - name: Upload exe as workflow artifact
        uses: actions/upload-artifact@v4
        with:
          name: CatalogoDePecas-exe
          path: dist\CatalogoDePecas.exe

      - name: Create GitHub Release and upload asset (inline PowerShell)
        shell: pwsh
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          $TagName = "${{ github.ref_name }}"
          $ReleaseName = "${{ github.ref_name }}"
          $Body = "Automated release generated by GitHub Actions."
          $AssetPath = 'dist\CatalogoDePecas.exe'
          $Repo = "ricardofebronio19/CATALOGOGERAL"

          if (-not $env:GITHUB_TOKEN) {
            Write-Error 'GITHUB_TOKEN is not set'
            exit 1
          }

          if (-not (Test-Path $AssetPath)) {
            Write-Error "Asset not found: $AssetPath"
            exit 1
          }

          $headers = @{ Authorization = "token $($env:GITHUB_TOKEN)"; "User-Agent" = "catalogo-build-script"; Accept = 'application/vnd.github+json' }

          Write-Host "Creating release $TagName in $Repo"
          $createUrl = "https://api.github.com/repos/$Repo/releases"
          $bodyObj = @{ tag_name = $TagName; name = $ReleaseName; body = $Body; draft = $false; prerelease = $false } | ConvertTo-Json
          $response = Invoke-RestMethod -Uri $createUrl -Method Post -Headers $headers -Body $bodyObj -ContentType 'application/json'
          if (-not $response) { Write-Error 'Failed to create release'; exit 1 }

          $assetName = Split-Path $AssetPath -Leaf
          # Alguns responses podem não expor upload_url; logamos e construimos a URL a partir do id se necessário
          Write-Host "Create release response id: $($response.id)"
          Write-Host "Create release response upload_url: $($response.upload_url)"
          if ($null -eq $response.upload_url -or $response.upload_url -eq '') {
            Write-Host 'upload_url not present in response, constructing from release id'
            $uploadUrl = "https://uploads.github.com/repos/$Repo/releases/$($response.id)/assets"
          } else {
            $uploadUrl = $response.upload_url -replace '\{\?name,label\}', ''
          }
          $uploadUri = "$uploadUrl?name=$assetName"
          Write-Host "Uploading asset $assetName to $uploadUri"
          # Usamos Invoke-RestMethod para que erros apareçam como JSON
          Invoke-RestMethod -Uri $uploadUri -Method Post -Headers $headers -InFile $AssetPath -ContentType 'application/octet-stream'
          Write-Host "Release and asset uploaded successfully. URL: $($response.html_url)"
